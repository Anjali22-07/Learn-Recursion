 Recurstion:
A function calling itself with different parameters and a halting condition or base case to terminate the infinite loop.

--> In recursion, we solve a bigger problem by solving smaller sub problems.

________________________________________________________________________________________________________________________________________________________________________________

        Function --
                  |
                  Problem --
                           |
                           Sub-Problem

______________________________________________________________________________________________________________________________________________________________________________

The Recursion Spell : 

1. Identify the samller problem --> let recursion solve it 

2. Self-Work --> Do your Share of Work

3. Base Case--> Identify it--> Smallest problem for which the answer is very obvious 

-- Something that needs to be recognised is: we need to do Recursive work first or Self work First.

_____________________________________________________________________________________________________________________________________________________________________________

Working of a Recursive Function :

methodName(N parameters){
 {
    if(halt condition){
           return result;
     }
   return methodName(N parameters)
  }
}
 
____________________________________________________________________________________________________________________________________________________________________________

Why do we need recursion?
--To solve complex problems easily 
--Simplifies code, helps in building logic easily.

______________________________________________________________________________________________________________________________

✅ 1. Tail Recursion
Definition: The recursive call is the last operation in the function.

No computation after the recursive call.

Optimizable by compilers using Tail Call Optimization (TCO) (Java doesn't support TCO, but many functional languages do).

example:
void tailRecursion(int n) {
    if (n == 0) return;
    System.out.println(n);      // Operation before call
    tailRecursion(n - 1);       // Recursive call at the end (tail)
}


✅ 2. Head Recursion
Definition: The recursive call happens before any other operation.

The function waits for the recursive call to return before continuing

example:
void headRecursion(int n) {
    if (n == 0) return;
    headRecursion(n - 1);      // Recursive call first
    System.out.println(n);     // Operation after call
}

______________________________________________________________________________________________________________________________________________________________________________



